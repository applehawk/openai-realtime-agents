/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
 * 
 * –ó–∞–ø—É—Å–∫: node test-mcp-integration.js
 */

const PREFERENCES_API_URL = 'http://localhost:3000/api/preferences-mcp';
const MCP_DIRECT_URL = 'http://localhost:7001/api/v1/mcp/execute';

async function testMcpIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π\n');

  const testUserId = 'test-user-' + Date.now();

  // –¢–µ—Å—Ç 0: Health check
  console.log('0Ô∏è‚É£ –¢–µ—Å—Ç health check...');
  try {
    const healthResponse = await fetch('http://localhost:3000/api/preferences-mcp');
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health check:', healthData.health?.mcp ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
    console.log('üìä –°—Ç–∞—Ç—É—Å MCP:', healthData.mcpStatus);
    console.log('‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:', healthData.health?.timestamp);
  } catch (error) {
    console.log('‚ùå Health check failed:', error.message);
  }

  try {
    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π...');
    const createResponse = await fetch(PREFERENCES_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool_name: 'create_user_preferences',
        parameters: {
          user_id: testUserId,
          competencies: 'Python, JavaScript, React, Node.js',
          communication_style: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π',
          meeting_preferences: '–£—Ç—Ä–µ–Ω–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏, –º–∞–∫—Å–∏–º—É–º 30 –º–∏–Ω—É—Ç',
          focused_work: '–ì–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞ –≤ —Ç–∏—Ö–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ',
          work_style: '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —Å–∏–Ω–∫–∞–º–∏',
          career_goals: 'Senior Full-Stack Developer, Tech Lead',
          problem_solving_approach: '–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π'
        },
        user_id: testUserId
      })
    });

    const createData = await createResponse.json();
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:', createData.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
    if (!createData.success) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', createData.error || createData.message);
      return;
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π...');
    const getResponse = await fetch(PREFERENCES_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool_name: 'get_user_preferences',
        parameters: {},
        user_id: testUserId
      })
    });

    const getData = await getResponse.json();
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:', getData.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
    if (getData.success && getData.data?.preferences) {
      console.log('üìã –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:', {
        competencies: getData.data.preferences.competencies,
        communication_style: getData.data.preferences.communication_style,
        career_goals: getData.data.preferences.career_goals
      });
    }

    // –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è...');
    const updateResponse = await fetch(PREFERENCES_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool_name: 'update_preference_field',
        parameters: {
          field: 'career_goals',
          value: 'Tech Lead, CTO, Open Source Contributor'
        },
        user_id: testUserId
      })
    });

    const updateData = await updateResponse.json();
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è:', updateData.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
    const checkResponse = await fetch(PREFERENCES_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool_name: 'get_user_preferences',
        parameters: {},
        user_id: testUserId
      })
    });

    const checkData = await checkResponse.json();
    if (checkData.success && checkData.data?.preferences) {
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏:', checkData.data.preferences.career_goals);
    }

    // –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π...');
    const searchResponse = await fetch(PREFERENCES_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool_name: 'search_preferences',
        parameters: {
          field: 'competencies',
          search_term: 'Python'
        },
        user_id: 'system'
      })
    });

    const searchData = await searchResponse.json();
    console.log('‚úÖ –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:', searchData.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
    if (searchData.success && searchData.data?.preferences) {
      console.log('üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', searchData.data.preferences.length);
    }

    // –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π...');
    const deleteResponse = await fetch(PREFERENCES_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool_name: 'delete_user_preferences',
        parameters: {},
        user_id: testUserId
      })
    });

    const deleteData = await deleteResponse.json();
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:', deleteData.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
    console.log('   - Next.js —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (npm run dev)');
    console.log('   - MCP —Å–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω');
    console.log('   - API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:', PREFERENCES_API_URL);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testMcpIntegration();
