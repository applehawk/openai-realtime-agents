/**
 * –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—á—å
 */

const PREFERENCES_API_URL = 'http://localhost:3000/api/preferences-mcp';

async function testPreferenceUpdates() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—á—å\n');

  const testUserId = 'test-user-' + Date.now();

  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π...');
    const createResponse = await fetch(PREFERENCES_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool_name: 'create_user_preferences',
        parameters: {
          user_id: testUserId,
          competencies: 'Python, JavaScript',
          communication_style: '—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π',
          meeting_preferences: '—É—Ç—Ä–æ–º',
          focused_work: '—Å 9 –¥–æ 12',
          work_style: '–≤ –∫–æ–º–∞–Ω–¥–µ',
          career_goals: '—Å—Ç–∞—Ç—å senior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º',
          problem_solving_approach: '–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π'
        },
        user_id: testUserId
      })
    });

    const createData = await createResponse.json();
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ:', createData.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');

    // –¢–µ—Å—Ç 1: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è...');
    const update1Response = await fetch(PREFERENCES_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool_name: 'update_preference_field',
        parameters: {
          field: 'communication_style',
          value: '–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π'
        },
        user_id: testUserId
      })
    });

    const update1Data = await update1Response.json();
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è:', update1Data.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');

    // –¢–µ—Å—Ç 2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á...');
    const update2Response = await fetch(PREFERENCES_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool_name: 'update_preference_field',
        parameters: {
          field: 'meeting_preferences',
          value: '—á–µ—Ç–≤–µ—Ä–≥ 14:00, –∫–æ—Ä–æ—Ç–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏'
        },
        user_id: testUserId
      })
    });

    const update2Data = await update2Response.json();
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á:', update2Data.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');

    // –¢–µ—Å—Ç 3: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π...');
    const update3Response = await fetch(PREFERENCES_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool_name: 'update_preference_field',
        parameters: {
          field: 'career_goals',
          value: '—Å—Ç–∞—Ç—å —Ç–∏–º–ª–∏–¥–æ–º –∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ä—Ç–∞–ø'
        },
        user_id: testUserId
      })
    });

    const update3Data = await update3Response.json();
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π:', update3Data.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π...');
    const finalResponse = await fetch(PREFERENCES_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool_name: 'get_user_preferences',
        parameters: {},
        user_id: testUserId
      })
    });

    const finalData = await finalResponse.json();
    if (finalData.success && finalData.data?.preferences) {
      const prefs = finalData.data.preferences;
      console.log('üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:');
      console.log(`  –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: ${prefs.communication_style}`);
      console.log(`  –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á: ${prefs.meeting_preferences}`);
      console.log(`  –ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏: ${prefs.career_goals}`);
      console.log(`  –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: ${prefs.competencies}`);
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
function testNaturalLanguageDetection() {
  console.log('\nüß† –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n');

  const testMessages = [
    '–î–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π',
    '–ò–∑–º–µ–Ω–∏–º –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á –Ω–∞ —á–µ—Ç–≤–µ—Ä–≥ 14:00',
    '–û–±–Ω–æ–≤–∏–º –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏ - —Ö–æ—á—É —Å—Ç–∞—Ç—å —Ç–∏–º–ª–∏–¥–æ–º',
    '–°–¥–µ–ª–∞–π —Ñ–æ–∫—É—Å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å 9 –¥–æ 12 —É—Ç—Ä–∞',
    '–ü–æ–º–µ–Ω—è–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –Ω–∞ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π',
    '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?', // –Ω–µ –¥–æ–ª–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ–≥–æ–¥—É' // –Ω–µ –¥–æ–ª–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
  ];

  const categoryKeywords = {
    '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': ['–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏', '–Ω–∞–≤—ã–∫–∏', '—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞', '—É–º–µ–Ω–∏—è', '–∑–Ω–∞–Ω–∏—è'],
    '—Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è': ['—Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è', '–æ–±—â–µ–Ω–∏–µ', '–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', '—Ä–∞–∑–≥–æ–≤–æ—Ä'],
    '–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –≤—Å—Ç—Ä–µ—á–∞–º': ['–≤—Å—Ç—Ä–µ—á–∏', '–≤—Å—Ç—Ä–µ—á', '–≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
    '—Ñ–æ–∫—É—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞': ['—Ñ–æ–∫—É—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '—Ñ–æ–∫—É—Å', '–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è', '–≥–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞'],
    '—Å—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã': ['—Å—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã', '—Ä–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å'],
    '–∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏': ['–∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏', '—Ü–µ–ª–∏', '–∫–∞—Ä—å–µ—Ä–∞', '–ø–ª–∞–Ω—ã'],
    '–ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é': ['–ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é', '—Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á', '–º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è']
  };

  const updateKeywords = [
    '–∏–∑–º–µ–Ω–∏', '–∏–∑–º–µ–Ω–∏–º', '–æ–±–Ω–æ–≤–∏', '–æ–±–Ω–æ–≤–∏–º', '—Å–¥–µ–ª–∞–π', '–ø–æ—Å—Ç–∞–≤—å', 
    '—É—Å—Ç–∞–Ω–æ–≤–∏', '–ø–æ–º–µ–Ω—è–π', '–¥–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º', '–¥–∞–≤–∞–π –æ–±–Ω–æ–≤–∏–º'
  ];

  testMessages.forEach((message, index) => {
    console.log(`${index + 1}. "${message}"`);
    
    const messageLower = message.toLowerCase();
    const hasUpdateIntent = updateKeywords.some(keyword => messageLower.includes(keyword));
    
    if (hasUpdateIntent) {
      let detectedCategory = null;
      for (const [category, keywords] of Object.entries(categoryKeywords)) {
        if (keywords.some(keyword => messageLower.includes(keyword))) {
          detectedCategory = category;
          break;
        }
      }
      
      if (detectedCategory) {
        console.log(`   ‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ "${detectedCategory}"`);
      } else {
        console.log(`   ‚ö†Ô∏è  –ù–∞–º–µ—Ä–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—Å—Ç—å, –Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞`);
      }
    } else {
      console.log(`   ‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ`);
    }
    console.log('');
  });
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testPreferenceUpdates();
testNaturalLanguageDetection();
